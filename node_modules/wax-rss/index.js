var storage = require("localforage");
var $ = require("jquery");
var A = require('promise');

var API = "https://full-text-rss.p.mashape.com/makefulltextfeed.php";
var OPTIONS = "?format=json&summary=1&url=";
var IMGAPI = "http://thawing-reaches-5477.herokuapp.com/?uri=";
var KEY = "e3YpPzRXHVmshpYFwDXwA1MN315Op1hCmcjjsnfOdzZbTB1xCs";

storage.config({
    name        : 'Wax',
    version     : 1.0,
    storeName   : 'rss', // Should be alphanumeric, with underscores.
    description : 'Cache of RSS feeds from online & peers'
});

function toDataUri(img) {
	return $.get(IMGAPI + img);
}

function replaceImages(html) {
	var tasks = [];
	var dom = $(html);
	var images = dom.find('img');

	images.each(function() {
		var $this = $(this);
		tasks.push(toDataUri($this.attr("src"))
			.then(function(data) {
				$this.attr("src", data)
			}));
	});
	return A.all(tasks).then(function() {
		return dom.html()
	});
}

function parseFeed(rawInfo) {
	var tasks = [];
	var feed = rawInfo.rss;
	var feedImageUrl = rawInfo.rss.channel.image.url;
	
	tasks.push(toDataUri(feedImageUrl)
		.then(function(data) {
			feed.image = data;
		}));
	
	feed.channel.item.forEach(function(article) {
		var itemImageUrl = article.media_thumbnail[0]["@attributes"].url;
		tasks.push(toDataUri(itemImageUrl)
			.then(function(data) {
				article.image = data;
			}));
		tasks.push(replaceImages(article.content_encoded)
			.then(function(html) {
				article.content_encoded = html;
			}));
	});
	
	return A.all(tasks).then(function() {
		return feed;
	});
}

module.exports = {
	getSubscribedList: function() {
		return storage.getItem('feeds').then(
			function(feeds) {
				return feeds ? feeds : {};
			});
	},
	subscribe: function(url) {
		return storage.getItem('feeds').then(
			function(feeds) {
				if (!feeds) feeds = {};
				feeds[url] = {
					updated: false
				};
				return storage.setItem("feeds", feeds);
			});
	},
	sync: function() {
		var tenMinutesAgo = new Date(Date.now() - 10*60*1000);
		return storage.getItem('feeds').then(
			function(feeds) {
				var tasks = [];
				if (!feeds) feeds = {};
				for (var i in feeds) {
					if (!feeds[i].updated || new Date(feeds[i].updated) < tenMinutesAgo) {
						var task = 
							$.ajax({url: API + OPTIONS + i, method: "GET", accepts: "JSON",
    					headers: {"X-Mashape-Key": KEY}})
						.then(parseFeed)
						.then(function(feed) {
							// ?
							return feed.then(function(finalFeed) {
								feeds[i] = finalFeed;
								feeds[i].updated = new Date();
							});
						});
						tasks.push(task);
					}
				};
				
				return A.all(tasks).then(function() {
					return storage.setItem('feeds', feeds);
				});
			});
	},
	unsubscribe: function(url) {
		return storage.getItem('feeds').then(
			function(feeds) {
				if (!feeds) feeds = {};
				delete feeds[url];
				return storage.setItem('feeds', feeds);
			});
	},
	getFeed: function(url, then) {
		return storage.getItem('feeds').then(
			function(feeds) {
				if (!feeds) feeds = {};
				return feeds[url].channel.item;
			});
	},
	getArticleAndCache: function(url, index, then) {
		return storage.getItem('feeds').then(
			function(feeds) {
				if (!feeds) feeds = {};
				if (!feeds[url]) return;
				
				return storage.getItem('cached').then(
					function(cached) {
						if (!cached) cached = {};
						cached[feeds[url].item[index].guid] = feeds[url].item[index];
						storage.setItem('cached', cached).then(function() {
							return feeds[url].item[index];
						});
					});			
			});
	},
	cachePeerArticle: function(item, then) {
		return storage.getItem('cached').then(function(cached) {
			if (!cached) cached = {};
			cached[item.guid] = item;
			return storage.setItem('cached', cached);
		});	
	},
	getCachedArticles: function() {
		return storage.getItem('cached');		
	},
	getCachedArticle: function(guid) {
		return storage.getItem('cached').then(
			function(cached) {
				if (!cached) cached = {};
				return cached[guid];
			});
	},
	clearCache: function() {
		return storage.setItem('cached', {});
	},
	removeFromCache: function(guid) {
		return storage.getItem('cached').then(
			function(cached) {
				if (!cached) cached = {};
				delete cached[guid];
				return storage.setItem('cached', cached);
			});
	}
}