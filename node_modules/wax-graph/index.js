var d3 = require('d3');

d3.selection.prototype.moveToFront = function() {
  return this.each(function(){
    this.parentNode.appendChild(this);
  });
};

var me = {name: "", id: 0, fixed: true, x: innerWidth/2, y: innerHeight/2};
var graph = {nodes: [me], links: []};

var force = d3.layout.force()
	.charge(-1000)
	.linkDistance(150)
	.alpha(.01)
	.gravity(0)
	.size([innerWidth, innerHeight]);

var svg = d3.select("svg")
	.attr("width", innerWidth)
	.attr("height", innerHeight)
	.attr("hidden", true);

function update() {
	force
		.nodes(graph.nodes)
		.links(graph.links)
		.start();
	
	var allLinks = svg.selectAll(".link").data(graph.links);
	
	allLinks.enter()
		.append("line")
    .attr("class", "link")
		.style("stroke-width", 1);
	
	allLinks.exit().remove();
	
	var allNodes = svg.selectAll(".node").data(graph.nodes);
	
	var nodeGroups = allNodes.enter()
		.append("g")
    .attr("class", "node");
	
	nodeGroups
		.append("circle")
    .attr("r", 15);
	
	nodeGroups.append("text")
    .text(function(d) { return d.name; })
		.attr("y", 25);
	
	allNodes.exit().remove();
	
	force.on("tick", function() {
    svg.selectAll(".link")
			.attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; });

    svg.selectAll(".node")
			.attr("transform", function(d) { 
				return "translate(" + d.x + "," + d.y + ")"; 
			})
			.moveToFront();
  });
}

module.exports = {
	connect: function(peer) {
		var newNode = {
			name: peer.name,
			id: peer.id
		}
		graph.nodes.push(newNode);
		update();
	},
	disconnect: function(peerId) {
		for (var i in graph.nodes) {
			if (graph.nodes[i].id == peerId) {
				delete graph.nodes[i];
			}
		}
		
		for (var i in graph.links) {
			if (graph.links[i].source.id == peerId ||
				  graph.links[i].target.id == peerId) {
				delete graph.links[i];
			}
		}
	},
	linkToMe: function(peerId) {
		var to;
		for (var i in graph.nodes) {
			if (graph.nodes[i].id == peerId) {
				to = graph.nodes[i];
			}
		}
		
		if (to) {
			graph.links.push({source: me, target: to});
		}
		update();
	},
	addLink: function(fromPeerId, toPeerId) {
		var from, to;
		for (var i in graph.nodes) {
			if (graph.nodes[i].id == fromPeerId) {
				from = graph.nodes[i];
			}

			if (graph.nodes[i].id == toPeerId) {
				to = graph.nodes[i];
			}
		}
		
		if (from && to && from !== to) {
			graph.links.push({source: from, target: to});
		}
		update();
	},
	onNodeClick: function(click) {
		if (click != null) {
			allNodes.on("click", function(d) {
				click(d3.select(this), d);
			});
		} else {
			allNodes.on("click", null);
		}
	},
	updateScreenSize: function(w, h) {
		me.x = w/2;
		me.y = h/2;
		svg
			.attr("width", w)
			.attr("height", h);
		force.size([w,h]);
	},
	show: function() {
		svg.attr("hidden", null);
	},
	hide: function() {
		svg.attr("hidden", true);
	}
};

